#!groovy

// Keep the version in sync with the one used in pom.xml in order to get correct syntax completion.
@Library('github.com/cloudogu/ces-build-lib@1542367')
import com.cloudogu.ces.cesbuildlib.*

node('docker') {

  properties([
    // Keep only the last 10 build to preserve space
    buildDiscarder(logRotator(numToKeepStr: '10')),
    disableConcurrentBuilds()
  ])

  timeout(activity: true, time: 20, unit: 'MINUTES') {

    Git git = new Git(this)

    catchError {

      stage('Checkout') {
        checkout scm
      }

      // we have to configure maven after checkout,
      // because we read the pom during the maven setup
      Maven mvn = setupMavenBuild()

      stage('Build') {
        mvn 'clean install -DskipTests'
        archive 'target/*.smp'
      }

      stage('Unit Test') {
        mvn 'test -Dmaven.test.failure.ignore=true'
      }

      stage('SonarQube') {
        def sonarQube = new SonarCloud(this, [sonarQubeEnv: 'sonarcloud.io-scm'])
        sonarQube.analyzeWith(mvn)
        if (!sonarQube.waitForQualityGateWebhookToBeCalled()) {
          currentBuild.result ='UNSTABLE'
        }
      }

      if (isReleaseBuild()) {

        stage('Assert valid release') {
          ensureValidRelease()
        }

        stage('Deployment') {
          // we need to deploy on a clean workspace, 
          // because of a bug in the scm annotation processor
          mvn "clean"
          mvn.useDeploymentRepository([
            id: 'maven.scm-manager.org', url: 'https://maven.scm-manager.org/nexus', credentialsId: 'maven.scm-manager.org', type: 'Configurable',
            snapshotRepository: '/content/repositories/plugin-snapshots', releaseRepository: '/content/repositories/plugin-releases'
          ])
          mvn.deployToNexusRepository()
        }

        stage('Plugin Center') {
          dir("plugin-center") {
            git branch: 'master', changelog: false, poll: false, url: 'https://bitbucket.org/scm-manager/plugin-center.git'
            writeReleaseDescriptor()
          }
        }

      } else {
        echo "skip deployment, we deploy only on release builds"
      }

    }

    // Archive Unit and integration test results, if any
    junit allowEmptyResults: true, testResults: '**/target/failsafe-reports/TEST-*.xml,**/target/surefire-reports/TEST-*.xml,**/target/jest-reports/TEST-*.xml'

    // Find maven warnings and visualize in job
    warnings consoleParsers: [[parserName: 'Maven']], canRunOnFailed: true

    mailIfStatusChanged(git.commitAuthorEmail)
  }
}

boolean isReleaseBuild() {
  if (env.TAG_NAME) {
    return true
  }
  return false
}

void ensureValidRelease() {
  String version = env.TAG_NAME
  String mvnVersion = mavenVersion()
  String pluginVersion = pluginXmlVersion()

  if (!version.equals(mvnVersion)) {
    error("version specified in git tag ${version} is not equal to maven version ${mvnVersion}")
  }

  if (!version.equals(pluginVersion)) {
    error("version specified in git tag ${version} is not equal to version ${pluginVersion}, which is specified in plugin.xml")
  }
}

String mavenVersion() {
  def project = readMavenPom file: "${WORKSPACE}/pom.xml"
  return project.version
}

String pluginXmlVersion() {
  def pluginXmlAsString = readFile "${env.WORKSPACE}/target/classes/META-INF/scm/plugin.xml"
  def pluginXml = new XmlSlurper().parseText(pluginXmlAsString)
  return pluginXml.information.version.text()
}

void writeReleaseDescriptor() {
  String sha256sum = getChecksum()
  def project = readMavenPom file: "${WORKSPACE}/pom.xml"
  String filename = project.version.replace('.', '-') + ".yaml"
  def pluginXmlAsString = readFile "${env.WORKSPACE}/target/classes/META-INF/scm/plugin.xml"
  String pluginName = env.JOB_NAME.split('/')[2]

  dir("src/plugins/${pluginName}/releases") {
    
    writeFile encoding: 'UTF-8', file: filename, text: """plugin: ${pluginName}
tag: ${project.version}
date: ${getCurrentDate()}
url: ${createDownloadUrl(project)}
checksum: ${sha256sum}
${createConditions(pluginXmlAsString)}
  """
    sh "git add ${filename}"
    sh "git commit --author 'Jenkins ${pluginName} <ci@scm-manager.org>' -m '${pluginName}: release ${project.version}'"
    withCredentials([usernamePassword(credentialsId: 'scmmarvin-at-bitbucket', usernameVariable: 'GIT_AUTH_USR', passwordVariable: 'GIT_AUTH_PSW')]) {
      sh 'git config --local credential.helper "!f() { echo username=\\$GIT_AUTH_USR; echo password=\\$GIT_AUTH_PSW; }; f"'
      sh "git push https://bitbucket.org/scm-manager/plugin-center.git HEAD:master"
    }

  }

}

@NonCPS
String createConditions(String pluginXmlAsString) {
  def pluginXml = new XmlSlurper().parseText(pluginXmlAsString)
  String conditions = ""
  if (pluginXml.conditions) {
    conditions = "conditions:"
    if (pluginXml.conditions.'min-version') {
      conditions += "\n  minVersion: ${pluginXml.conditions.'min-version'.text()}"
    }
    if (pluginXml.conditions.os) {
      conditions += "\n  os:"
      pluginXml.conditions.os.children().each { os -> 
        conditions += "\n  - ${os.text()}" 
      }
    }
    if (pluginXml.conditions.arch) {
      conditions += "\n  arch: ${pluginXml.conditions.arch.text()}"
    }
  }
  return conditions
}

Maven setupMavenBuild() {
  // Keep this version number in sync with .mvn/maven-wrapper.properties
  Maven mvn = new MavenInDocker(this, "3.5.2-jdk-8")
  mvn.additionalArgs += ' -Pci'

  if (isReleaseBuild()) {
    // Release starts javadoc, which takes very long, so do only for certain branches
    mvn.additionalArgs += ' -DperformRelease'
    // JDK8 is more strict, we should fix this before the next release. Right now, this is just not the focus, yet.
    mvn.additionalArgs += ' -Dmaven.javadoc.failOnError=false'
  }
  return mvn
}


String getCurrentDate() {
  return new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))
}

String getChecksum() {
  return sh(returnStdout: true, script: "sha256sum ${WORKSPACE}/target/*.smp").trim().split("\\s+")[0]
}

String createDownloadUrl(def project) {
  String groupId = project.groupId ? project.groupId : project.parent.groupId
  groupId = groupId.replace('.', '/')
  String url = "https://maven.scm-manager.org/nexus/content/repositories/plugin-releases/"
  url += groupId + "/" + project.artifactId + "/" + project.version + "/" + project.artifactId + "-" + project.version + ".smp"
  return url
}
