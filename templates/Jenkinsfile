#!groovy

// Keep the version in sync with the one used in pom.xml in order to get correct syntax completion.
@Library('github.com/cloudogu/ces-build-lib@503b952')
import com.cloudogu.ces.cesbuildlib.*

node('docker') {

  properties([
    // Keep only the last 10 build to preserve space
    buildDiscarder(logRotator(numToKeepStr: '10')),
    disableConcurrentBuilds()
  ])

  timeout(activity: true, time: 20, unit: 'MINUTES') {

    Git git = new Git(this)

    catchError {

      Maven mvn = setupMavenBuild()

      stage('Checkout') {
        // deleteDir()
        if ("Git".equals(env.scmType)) {
          git url: 'https://bitbucket.org/scm-manager/' + env.pluginName + '.git'
        } else {
          checkout([$class: 'MercurialSCM', source: 'https://bitbucket.org/scm-manager/' + env.pluginName])
        }
      }

      stage('Build') {
        mvn 'clean install -DskipTests'
        archive 'target/*.smp'
      }

      stage('Unit Test') {
        mvn 'test -Dmaven.test.failure.ignore=true'
      }

//       stage('SonarQube') {
//
//         def sonarQube = new SonarCloud(this, [sonarQubeEnv: 'sonarcloud.io-scm'])
//
//         sonarQube.analyzeWith(mvn)
//
//         if (!sonarQube.waitForQualityGateWebhookToBeCalled()) {
//           currentBuild.result ='UNSTABLE'
//         }
//       }

      stage('Deployment') {
        mvn.useDeploymentRepository([
          id: 'maven.scm-manager.org', url: 'https://maven.scm-manager.org/nexus', credentialsId: 'maven.scm-manager.org', type: 'Configurable',
          snapshotRepository: '/content/repositories/plugin-snapshots', releaseRepository: '/content/repositories/plugin-releases'
        ])
        mvn.deployToNexusRepository()
      }

      stage('Plugin Center') {
        if (isMainBranch()) {
          String sha256sum = sh(returnStdout: true, script: 'sha256sum target/*.smp | awk "{print $1}"')
          String version = mvn.getVersion()
          dir("plugin-center") {
            git changelog: false, poll: false, url: 'https://bitbucket.org/scm-manager/plugin-center.git'
            dir("src/plugins/${env.pluginName}/releases") {
              String filename = version.replace('.', '-') + ".yaml"
              writeFile encoding: 'UTF-8', file: filename, text: """
plugin: ${env.pluginName}
tag: ${version}
date: ${getCurrentDate()}
url: https://maven.scm-manager.org/nexus/...
checksum: ${sha256sum}
conditions:
  os: linux
"""
            }
          }

        }
      }

    }

       // Archive Unit and integration test results, if any
       junit allowEmptyResults: true, testResults: '**/target/failsafe-reports/TEST-*.xml,**/target/surefire-reports/TEST-*.xml,**/target/jest-reports/TEST-*.xml'
  
       // Find maven warnings and visualize in job
       warnings consoleParsers: [[parserName: 'Maven']], canRunOnFailed: true

       mailIfStatusChanged(git.commitAuthorEmail)
  }
}

Maven setupMavenBuild() {
  // Keep this version number in sync with .mvn/maven-wrapper.properties
  Maven mvn = new MavenInDocker(this, "3.5.2-jdk-8")
  mvn.additionalArgs += ' -Pci'

  if (isMainBranch()) {
    // Release starts javadoc, which takes very long, so do only for certain branches
    mvn.additionalArgs += ' -DperformRelease'
    // JDK8 is more strict, we should fix this before the next release. Right now, this is just not the focus, yet.
    mvn.additionalArgs += ' -Dmaven.javadoc.failOnError=false'
  }
  return mvn
}

String getMainBranch() {
  if ("Git".equals(env.scmType)) {
    return "master"
  }
  return "default"
}

boolean isMainBranch() {
  return true //getMainBranch().equals(env.BRANCH_NAME)
}

String getCurrentDate() {
  return new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))
}
