#!groovy

// Keep the version in sync with the one used in pom.xml in order to get correct syntax completion.
@Library('github.com/cloudogu/ces-build-lib@c079662')
import com.cloudogu.ces.cesbuildlib.*

node('docker') {

  integrationBranch = 'develop'

  properties([
    // Keep only the last 10 build to preserve space
    buildDiscarder(logRotator(numToKeepStr: '10')),
    disableConcurrentBuilds()
  ])

  timeout(activity: true, time: 20, unit: 'MINUTES') {

    Git git = new Git(this, 'cesmarvin-github')

    catchError {

      stage('Checkout') {
        sh 'rm -rf plugin-center || true'
        checkout scm
      }

      // we have to configure maven after checkout,
      // because we read the pom during the maven setup
      Maven mvn = setupMavenBuild()

      if (isReleaseBranch()) {
        stage('Set Version') {
          String releaseVersion = getReleaseVersion();
          mvn.setVersion(releaseVersion);
          mvn "sonia.scm.maven:smp-maven-plugin:fix-package-version"
          git.add("pom.xml");
          // TODO Move to ces build lib
          sh returnStatus: true, script: 'git add package.json'
          git.commit("release version ${releaseVersion}", 'CES Marvin', 'cesmarvin@cloudogu.com')
          // Delete local tag maybe it is leftover from previous builds
          // TODO move to ces build lib
          sh returnStatus: true, script: "git tag -d '${releaseVersion}'"
          git.fetch()
          // TODO move to ces build lib
          sh returnStatus: true, script: 'git branch -D master'
          git.checkout('master')
          git.mergeFastForwardOnly(env.BRANCH_NAME)
          // TODO: move to ces build lib
          sh "git -c user.name='CES Marvin' -c user.email='cesmarvin@cloudogu.com' tag -m 'release version ${releaseVersion}' ${releaseVersion}"
        }
      }

      stage('Build') {
        mvn 'clean package -DskipTests'
      }

      stage('Unit Test') {
        mvn 'org.jacoco:jacoco-maven-plugin:0.8.5:prepare-agent test org.jacoco:jacoco-maven-plugin:0.8.5:report -Dmaven.test.failure.ignore=true'
        // Archive Unit and integration test results, if any
        junit allowEmptyResults: true, testResults: '**/target/failsafe-reports/TEST-*.xml,**/target/surefire-reports/TEST-*.xml,**/target/jest-reports/TEST-*.xml'
      }

      stage('SonarQube') {
        def sonarQube = new SonarCloud(this, [sonarQubeEnv: 'sonarcloud.io-scm'])
        sonarQube.analyzeWith(mvn)
        if (!sonarQube.waitForQualityGateWebhookToBeCalled()) {
          currentBuild.result ='UNSTABLE'
        }
      }

      if ((isReleaseBranch() || isIntegrationBranch()) && isBuildSuccessful()) {

        stage("Archive Artifacts") {
          archive 'target/*.smp'
        }

        stage('Deployment') {
          // we need to deploy on a clean workspace, 
          // because of a bug in the scm annotation processor
          mvn "clean"
          mvn.useDeploymentRepository([
            id: 'maven.scm-manager.org', url: 'https://maven.scm-manager.org/nexus', credentialsId: 'maven.scm-manager.org', type: 'Configurable',
            snapshotRepository: '/content/repositories/plugin-snapshots', releaseRepository: '/content/repositories/plugin-releases'
          ])
          mvn.deployToNexusRepository()
        }
      }

      if (isReleaseBranch() && isBuildSuccessful()) {
        stage("Push Tag") {
          git.push('master')
          git.push('--tags')
        }

        stage('Plugin Center') {
          String version = getReleaseVersion();

          dir("plugin-center") {
            git branch: 'master', changelog: false, poll: false, url: 'https://github.com/scm-manager/plugin-center.git'
            writeReleaseDescriptor(git, version)
          }
        }

        stage("Set Next Version") {
          // TODO move to ces build lib
          sh returnStatus: true, script: "git branch -D '${integrationBranch}'"
          git.checkout(integrationBranch)
          git.merge('master')
          mvn.setVersionToNextMinorSnapshot()
          // TODO Falls vorhanden, version in package.json anpassen mit SMP Plugin
          mvn 'sonia.scm.maven:smp-maven-plugin:fix-package-version'
          git.add("pom.xml");
          sh returnStatus: true, script: 'git add package.json'
          git.commit('Prepare for next development iteration', 'CES Marvin', 'cesmarvin@cloudogu.com')
          git.push(integrationBranch)
        }

        stage('Delete Release Branch') {
          git.push(":${env.BRANCH_NAME}")
        }

      } else {
        echo "skip deployment, we deploy only on release builds"
      }

    }


    mailIfStatusChanged(git.commitAuthorEmail)
  }
}

String integrationBranch

boolean isReleaseBranch() {
  return env.BRANCH_NAME.startsWith("release/");
}

boolean isIntegrationBranch() {
  return env.BRANCH_NAME.equals(integrationBranch);
}
  
String getReleaseVersion() {
  return env.BRANCH_NAME.substring("release/".length());
}
 
void writeReleaseDescriptor(def git, String version ) {
  
  String filename = version.replace('.', '-') + ".yaml"
  def descriptorFile = "${env.WORKSPACE}/target/release.yaml"
  String pluginName = env.JOB_NAME.split('/')[1]

  dir("src/plugins/${pluginName}/releases") {

    // writeYaml does not override files, so we have to delete it
    sh returnStatus: true, script: "rm -f ${filename}"
    sh "mv ${descriptorFile} ${filename}"

    git.add(filename)
    git.commit("${pluginName}: release ${version}", 'CES Marvin', 'cesmarvin@cloudogu.com')
    git.push('HEAD:master')
  }

}

Maven setupMavenBuild() {
  // Keep this version number in sync with .mvn/maven-wrapper.properties
  Maven mvn = new MavenWrapperInDocker(this, 'scmmanager/java-build:11.0.6_10')

  // Release starts javadoc, which takes very long, so do only for certain branches
  mvn.additionalArgs += ' -DperformRelease'
  // JDK8 is more strict, we should fix this before the next release. Right now, this is just not the focus, yet.
  mvn.additionalArgs += ' -Dmaven.javadoc.failOnError=false'

  return mvn
}
