#!groovy
pipeline {
  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    disableConcurrentBuilds()
  }

  agent {
    docker {
      image 'scmmanager/java-build:11.0.9_11.1'
      label 'docker'
    }
  }

  environment {
    HOME = "${env.WORKSPACE}"
    SONAR_USER_HOME = "${env.WORKSPACE}/.sonar"
  }

  stages {
    stage('Prepare build') {
      steps {
        script {
          buildTool = new Gradle(this)
        }
      }
    }

    stage('Set Version') {
      when {
        branch pattern: 'release/*', comparator: 'GLOB'
      }
      steps {
        sh "git checkout ${env.BRANCH_NAME}"
        // read version from brach, set it and commit it
        script {
          buildTool.setVersion(releaseVersion)
        }
        commit "release version ${releaseVersion}"

        // fetch all remotes from origin
        sh 'git config --replace-all "remote.origin.fetch" "+refs/heads/*:refs/remotes/origin/*"'
        sh 'git fetch --all'

        // checkout, reset and merge
        sh 'git checkout main'
        sh 'git reset --hard origin/main'
        sh "git merge --ff-only ${env.BRANCH_NAME}"

        // set tag
        tag releaseVersion
      }
    }

    stage('Build') {
      steps {
        script {
          buildTool.build()
        }
      }
    }

    stage('Check') {
      steps {
        script {
          buildTool.check()
        }
      }
    }

    stage('SonarQube') {
      steps {
        sh 'git config --replace-all "remote.origin.fetch" "+refs/heads/*:refs/remotes/origin/*"'
        sh 'git fetch origin main'
        script {
          buildTool.sonarQube()
        }
      }
    }

    stage('Deployment') {
      when {
        expression { return isBuildSuccess() }
        anyOf {
          branch pattern: 'release/*', comparator: 'GLOB'
        }
      }
      steps {
        withYarnAuth('npm-token-scm-manager') {
          script {
            buildTool.deploy()
          }
        }
      }
      post {
        always {
          sh 'rm -f settings.xml .npmrc .yarnrc || true'
        }
      }
    }

    stage('Push Tag') {
      when {
        branch pattern: 'release/*', comparator: 'GLOB'
        expression { return isBuildSuccess() }
      }
      steps {
        // push changes back to remote repository
        authGit 'SCM-Manager', 'push origin main --tags'
        authGit 'SCM-Manager', 'push origin --tags'
      }
    }

    stage('Plugin Center') {
      when {
        branch pattern: 'release/*', comparator: 'GLOB'
        expression { return isBuildSuccess() }
      }
      steps {
        sh 'rm -rf plugin-center || true'
        sh 'mkdir plugin-center'
        dir('plugin-center') {
          authGit 'SCM-Manager', 'push origin HEAD:master'
          git branch: 'master', changelog: false, poll: false, url: 'https://ecosystem.cloudogu.com/scm/repo/scm-manager/website'
          script {
            String filename = releaseVersion.replace('.', '-') + '.yaml'
            String pluginName = env.JOB_NAME.split('/')[1]
            dir("content/plugins/${pluginName}/releases") {
              sh "mv ${buildTool.releaseDescriptorPath()} ${filename}"
              sh "git add ${filename}"
              commit "${pluginName}: release ${releaseVersion}"
              authGit 'SCM-Manager', 'push origin HEAD:master'
            }
          }
        }
      }
    }

    stage('Set Next Version') {
      when {
        branch pattern: 'release/*', comparator: 'GLOB'
        expression { return isBuildSuccess() }
      }
      steps {
        sh returnStatus: true, script: 'git branch -D develop'
        sh 'git checkout develop'
        sh 'git merge main'
        script {
          buildTool.setVersionToNextSnapshot()
        }

        commit 'Prepare for next development iteration'
        authGit 'SCM-Manager', 'push origin develop'
      }
    }

    stage('Delete Release Branch') {
      when {
        branch pattern: 'release/*', comparator: 'GLOB'
        expression { return isBuildSuccess() }
      }
      steps {
        authGit 'SCM-Manager', "push origin :${env.BRANCH_NAME}"
      }
    }

    stage('Push to GitHub') {
      when {
        anyOf {
          branch pattern: 'develop', comparator: 'GLOB'
          branch pattern: 'main', comparator: 'GLOB'
          branch pattern: 'support/*', comparator: 'GLOB'
        }
        expression { return isBuildSuccess() }
      }
      steps {
        script {
          String pluginName = env.JOB_NAME.split('/')[1]
          authGit 'cesmarvin', "push https://github.com/scm-manager/${pluginName} HEAD:${env.BRANCH_NAME}"
          authGit 'cesmarvin', "push --tags https://github.com/scm-manager/${pluginName}"
        }
      }
    }
  }

  post {
    failure {
      mail to: 'scm-team@cloudogu.com',
        subject: "Jenkins Job ${JOB_NAME} - Build #${BUILD_NUMBER} - ${currentBuild.currentResult}!",
        body: "Check console output at ${BUILD_URL} to view the results."
    }
    unstable {
      mail to: 'scm-team@cloudogu.com',
        subject: "Jenkins Job ${JOB_NAME} - Build #${BUILD_NUMBER} - ${currentBuild.currentResult}!",
        body: "Check console output at ${BUILD_URL} to view the results."
    }
    fixed {
      mail to: 'scm-team@cloudogu.com',
        subject: "Jenkins Job ${JOB_NAME} - Is back to normal with Build #${BUILD_NUMBER}",
        body: "Check console output at ${BUILD_URL} to view the results."
    }
  }
}

BuildTool buildTool

String getReleaseVersion() {
  return env.BRANCH_NAME.substring('release/'.length())
}

void commit(String message) {
  sh "git -c user.name='CES Marvin' -c user.email='cesmarvin@cloudogu.com' commit -m '${message}'"
}

void tag(String version) {
  String message = "release version ${version}"
  sh "git -c user.name='CES Marvin' -c user.email='cesmarvin@cloudogu.com' tag -m '${message}' ${version}"
}

void isBuildSuccess() {
  return currentBuild.result == null || currentBuild.result == 'SUCCESS'
}

void withYarnAuth(String credentials, Closure<Void> closure) {
  withCredentials([string(credentialsId: credentials, variable: 'NPM_TOKEN')]) {
    writeFile encoding: 'UTF-8', file: '.npmrc', text: "//registry.npmjs.org/:_authToken='${NPM_TOKEN}'"
    writeFile encoding: 'UTF-8', file: '.yarnrc', text: '''
      registry "https://registry.npmjs.org/"
      always-auth true
      email cesmarvin@cloudogu.com
    '''.trim()

    closure.call()
  }
}

void authGit(String credentials, String command) {
  withCredentials([
    usernamePassword(credentialsId: credentials, usernameVariable: 'AUTH_USR', passwordVariable: 'AUTH_PSW')
  ]) {
    sh "git -c credential.helper=\"!f() { echo username='\$AUTH_USR'; echo password='\$AUTH_PSW'; }; f\" ${command}"
  }
}

interface BuildTool {

  void setVersion(String version)
  void check()
  void build()
  void sonarQube()
  void deploy()
  String releaseDescriptorPath()
  void setVersionToNextSnapshot()

}

class Gradle implements BuildTool {

  def script

  Gradle(def script) {
    this.script = script
  }

  void setVersion(String version) {
    gradle "setVersion --newVersion=${version}"
    gradle 'fix'
    script.sh 'git add gradle.properties'
    try {
      script.sh 'git add package.json'
    } catch (Exception e) {
      println('Could not add package.json')
    }
  }

  void check() {
    gradle 'check'
    // update timestamp to avoid rerun tests again and fix junit-plugin:
    // ERROR: Test reports were found but none of them are new
    script.sh 'touch build/test-results/*/*.xml || true'
    script.sh 'touch build/jest-reports/TEST-*.xml || true'
    script.junit allowEmptyResults: true, testResults: 'build/test-results/*/*.xml,build/jest-reports/TEST-*.xml'
  }

  void build() {
    gradle 'build -xtest'
    script.archiveArtifacts artifacts: 'build/libs/*.smp'
  }

  void sonarQube() {
    script.withSonarQubeEnv('sonarcloud.io-scm') {
      String sonar = "sonarqube -Dsonar.organization=scm-manager -Dsonar.branch.name=${script.env.BRANCH_NAME}"
      if (script.env.BRANCH_NAME != 'main') {
        sonar += ' -Dsonar.branch.target=main'
      }
      gradle sonar
    }
  }

  void deploy() {
    script.withCredentials([script.usernamePassword(credentialsId: 'packages-scm-manager-org', passwordVariable: 'serverPassword', usernameVariable: 'serverUsername')]) {
      gradle "publish -PpackagesScmManagerUsername=${script.env.serverUsername} -PpackagesScmManagerPassword=${script.env.serverPassword}"
    }
  }

  String releaseDescriptorPath() {
    return "${script.env.WORKSPACE}/build/libs/release.yaml"
  }

  void setVersionToNextSnapshot() {
    gradle 'setVersionToNextSnapshot'
    gradle 'fix'
    script.sh 'git add gradle.properties'
    try {
      script.sh 'git add package.json'
    } catch (Exception e) {
      println('Could not add package.json')
    }
  }

  void gradle(String command) {
    script.sh "./gradlew ${command}"
  }

}
